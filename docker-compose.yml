services:
  app:
    # image: dockeruser/app-image:latest  # Use a published image (if available)
    # build: .  # Build from Dockerfile in current directory (uncomment if building locally)
    container_name: dash_gunicorn
    restart: always
    networks:
      - webnet
    depends_on:
      - redis
  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - webnet
  nginx:
    image: nginx:latest
    restart: unless-stopped
    container_name: nginx_proxy
    volumes:
      # Mount custom NGINX config (e.g., for reverse proxy and SSL)
      # - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      # - ./nginx/conf.d:/etc/nginx/conf.d  # Optional: include for site configs
      # - ./certbot/conf:/etc/letsencrypt  # Certbot-generated certs
      # - ./certbot/www:/var/www/certbot   # Webroot for ACME challenges
      # - ./.htpasswd:/etc/nginx/.htpasswd  # Optional: for basic auth
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    networks:
      - webnet
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
    # Mount certbot config and webroot (must match NGINX volumes)
    # - ./certbot/conf:/etc/letsencrypt
    # - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    networks:
      - webnet
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
networks:
  webnet:
    driver: bridge